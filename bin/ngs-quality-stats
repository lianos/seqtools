#!/usr/bin/env python
import os, sys, time
from optparse import OptionParser
import re

from SeqTools import QualityMatrix
from SeqTools import fasta, fastq

_has_space = re.compile(".*\s.*")
def parse_quality_fasta(file_path, read_length, split_quality=None):
    """Parse the SOLiD Qual files (in FASTA format)"""
    if read_length == 0 or split_quality is None:
        ## Guess
        for record in fasta.parse(file_path):
            value = record.value.strip()
            if split_quality is None:
                split_quality = _has_space.match(value) is not None
            if read_length == 0:
                if split_quality:
                    read_length = len(value.split())
                else:
                    read_length = len(value)
            break
    qm = QualityMatrix(read_length=read_length)
    for idx,record in enumerate(fasta.parse(file_path)):
        value = record.value
        if split_quality:
            value = [int(x) for x in value.split()]
        qm.observe_all(value)
    return qm

def parse_quality_fastq(file_path, read_length):
    if read_length == 0:
        for record in fastq.parse(file_path):
            read_length = len(record)
    qm = QualityMatrix(read_length)
    for idx,fq in enumerate(fastq.parse(file_path)):
        qm.observe_all([ord(x) for x in fq.quality])
    return qm

def parse_quality(file_path, read_length, qtype):
    """Wrapper to parse the quality file"""
    qtype = qtype.lower()
    parsef = {
      "fasta" : parse_quality_fasta,
      "fastq" : parse_quality_fastq
    }
    qm = parsef[qtype](file_path, read_length)
    return qm

if __name__ == '__main__':
    usage = "usage: %prog [options] READS\n\n" \
            "Collects quality statistics for the reads in the sample.\n" \
            "Should be able to work on multiple import formats, ie.\n" \
            "FASTQ or SOLiD *.qual files via the -t/--type flag\n\n" \
            "The output is meant to resemble that from the FASTX toolkit\n" \
            "and is sent to STDOUT"
    parser = OptionParser(usage=usage)
    parser.add_option("-l", "--length", dest="read_length", default=0,
                      type='int',
                      help="The (maximum) length of reads (quality scores)")
    parser.add_option("-t", "--type", dest="type", default="fasta",
                      help="The file the stats are embedded in")
    
    (options, args) = parser.parse_args()
    if len(args) != 1:
        parser.error("Quality file required as positional argument")
    qfile = args[0]
    if not os.path.isfile(qfile):
        parser.error("Can't read quality file: %s", qfile)

    t0 = time.time()
    qm = parse_quality(qfile, options.read_length, options.type)
    seconds = time.time() - t0
    sys.stdout.write("# Took %.2f minutes\n" % (seconds / 60.0))
    sys.stdout.write(str(qm) + "\n")
    

