#!/usr/bin/env python
from __future__ import division

import os,sys
from optparse import OptionParser
import re

import seqtools
from seqtools import fastq, io

usage = """usage: %prog [options] FASTQ [OUTFILE]

Filter reads that have too many ambiguous letters (N, or .)

To compress output on the fly, ensure that OUTFILE ends in *.gz"""


__parsers = {
    'fastq' : seqtools.fastq.parse,
    'fasta' : seqtools.fasta.parse,
    'qseq'  : seqtools.qseq.parse,
    'bowtie': seqtools.bowtie.parse
}

def do_filter(cmd):
    format = cmd.options.format
    parse = __parsers[format]
    write = cmd.outfile.write
    
    fraction = cmd.options.fraction
    nreads = 0
    ntrashed = 0
    regex = re.compile("[%s]" % cmd.options.pattern.replace(".", "\."))
    
    for (idx, read) in enumerate(parse(cmd.infile)):
        nreads += 1
        nfraction = len(regex.findall(read.sequence)) / len(read)
        if nfraction >= fraction:
            # if trashfile is not None:
            #     trashfile.write(str(record))
            ntrashed += 1
        else:
            write(str(read))
    
    cmd.add_stat("Reads processed", nreads)
    cmd.add_stat("Reads filtered", ntrashed)

###
if __name__ == '__main__':
    parser = OptionParser(usage=usage)
    parser.add_option("-f", "--fraction", dest="fraction", default=0.5, type=float,
                      help="The fraction of N's that result in junking the read")
    parser.add_option("-F", "--format", dest="format", default="fastq",
                      help="Format of input file")
    parser.add_option("-p", "--pattern", dest="pattern", default="N.",
                      help="Defaults to flag both N and . as ambiguous [N.]")
    parser.add_option("-t", "--trashfile", dest="trashfile", default=None,
                      help="Name of file to save reads that are discareded.")
    (options, args) = parser.parse_args()

    cmd = seqtools.Command(do_filter, parser, name='ngs-filter-ambiguous')
    
    if cmd.options.fraction >= 1:
        cmd.options.fraction = cmd.options.fraction / 100

    if cmd.options.format not in __parsers:
        cmd.error("Unknown input format: %s", cmd.options.informat)
    
    cmd.run()

