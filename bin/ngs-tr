#!/usr/bin/env python

from __future__ import division

from optparse import OptionParser
from string import maketrans

import seqtools
from seqtools.qualities import convert_quality, match_phred_offset

usage = """usage: %prog [options] INCHARS OUTCHARS INFILE OUTFILE

Translates (in the unix `tr` sense of the word) nucleotides in sequences.
"""

__parsers = {
    'fastq' : seqtools.fastq.parse,
    'fasta' : seqtools.fasta.parse,
    'qseq'  : seqtools.qseq.parse,
    'bowtie': seqtools.bowtie.parse
}

__outcons = {
    'fastq' : seqtools.fastq.FastqRead,
    'fasta' : seqtools.fasta.FastaRecord,
    'qseq'  : seqtools.qseq.QseqRead,
}

def do_translate(cmd):
    format = cmd.options.format
    trantab = maketrans(cmd.args[0], cmd.args[1])
    
    parse = __parsers[format]
    cons = __outcons[format]
    
    write = cmd.outfile.write
    nreads = 0

    for (idx,read) in enumerate(parse(cmd.infile)):
        nreads += 1
        read.sequence = read.sequence.translate(trantab)
        write(str(read))
    cmd.add_stat('Reads processed', nreads)

if __name__ == '__main__':
    parser = OptionParser(usage=usage)
    parser.add_option('-f', '--format', default="fastq",
                      help="Sequence formt [fastq]")
                      
    cmd = seqtools.Command(do_translate, parser, in_arg=2, out_arg=3,
                           name='ngs-convert-quals')

    if cmd.options.format not in __parsers:
        cmd.error("Unknown input format: %s", cmd.options.informat)

    if len(cmd.args) < 2:
        cmd.error("INCHARS and OUTCHARS required to make translation table")
    if len(cmd.args[0]) != len(cmd.args[1]):
        cmd.error("Length of INCHARS must equal length of OUTCHARS")

    cmd.run()

