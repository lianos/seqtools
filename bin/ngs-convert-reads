#!/usr/bin/env python

from __future__ import division

from optparse import OptionParser

import seqtools
from seqtools.qualities import convert_quality, match_phred_offset

__parsers = {
    'fastq' : seqtools.fastq.parse,
    'fasta' : seqtools.fasta.parse,
    'qseq'  : seqtools.qseq.parse,
    'bowtie': seqtools.bowtie.parse
}

__outcons = {
    'fastq' : seqtools.fastq.FastqRead,
    'fasta' : seqtools.fasta.FastaRecord,
    'qseq'  : seqtools.qseq.QseqRead,
}

def do_convert(cmd):
    informat = cmd.options.informat
    outformat = cmd.options.outformat
    inoffset = cmd.options.inoffset
    outoffset = cmd.options.outoffset
    
    parse = __parsers[informat]
    cons = __outcons[outformat]
    
    write = cmd.outfile.write
    nreads = 0

    for (idx,read) in enumerate(parse(cmd.infile)):
        nreads += 1
        quality = read.quality
        
        if inoffset != outoffset:
            quality = convert_quality(quality, inoffset, outoffset)
            
        if outformat == informat:
            new = read
            new.quality = quality
        else:
            new = cons(id=read.id, sequence=read.sequence, quality=quality)

        write(str(new))
    cmd.add_stat('Reads processed', nreads)

if __name__ == '__main__':
    usage = """usage: %prog [options] INPUT [OUTFILE]
    
    Swiss army knife to convert reads from one format or phred scale to
    another.
    
    Single-letter command line arguments applied to the input format are
    lowercase. The corresponding argument for the output file is in uppercase.
    
    If the input argument is the same as the output argument, no conversion
    for that format/phred scale is attempted.
    """

    parser = OptionParser(usage=usage)
    parser.add_option('-f', '--informat', default="fastq",
                      help="Format of input file")
    parser.add_option('-F', '--outformat', default="fastq",
                      help="Format of input file")
    parser.add_option('-b', '--inoffset', default='sanger',
                      help="Base offset of input quals [SANGER = 33]")
    parser.add_option('-B', '--outoffset', default='sanger',
                      help="Base offset of output quals [SANGER = 33]")

    cmd = seqtools.Command(do_convert, parser, name='ngs-convert-quals')

    if cmd.options.informat not in __parsers:
        cmd.error("Unknown input format: %s", cmd.options.informat)
    if cmd.options.outformat not in __outcons:
        cmd.error("Unknown output format: %s", cmd.options.outformat)
    
    ## did user input in/out bases as names?
    cmd.options.inoffset = match_phred_offset(cmd.options.inoffset)
    cmd.options.outoffset = match_phred_offset(cmd.options.outoffset)
    
    cmd.run()

