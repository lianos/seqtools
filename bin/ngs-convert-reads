#!/usr/bin/env python

from __future__ import division

from optparse import OptionParser

from seqtools import NGSQualityBaseOffset
from seqtools import Command
from seqtools.qualities import convert_quality, match_phred_offset

import seqtools

__parsers = {
    'fastq' : seqtools.fastq.parse,
    'fasta' : seqtools.fasta.parse,
    'qseq'  : seqtools.qseq.parse,
    'bowtie': seqtools.bowtie.parse
}

__outcons = {
    'fastq' : seqtools.fastq.FastqRead,
    'fasta' : seqtools.fasta.FastaRecord,
    'qseq'  : seqtools.qseq.QseqRead,
}

def do_convert(cmd):
    informat = cmd.options.informat
    outformat = cmd.options.outformat
    inoff = cmd.options.inoff
    outoff = cmd.options.outoff
    
    parse = __parsers[informat]
    cons = __outcons[outformat]
    
    write = cmd.outfile.write
    nreads = 0

    for (idx,read) in enumerate(parse(cmd.infile)):
        nreads += 1
        quality = read.quality
        
        if inoff != outoff:
            quality = convert_quality(read.quality, inoff, outoff)
            
        if outformat == informat:
            new = read
            new.quality = quality
        else:
            new = cons(id=read.id, sequence=read.sequence, quality=quality)

        write(str(new))
    cmd.add_stat('Reads processed', nreads)

if __name__ == '__main__':
    usage = """usage: %prog [options] INPUT [OUTFILE]
    
    Swiss army knife to convert reads from one format to another.
    Other conversions are availabe inline as well, such as converting
    quality scores."""

    parser = OptionParser(usage=usage)
    parser.add_option('-i', '--informat', default="fastq",
                      help="Format of input file")
    parser.add_option('-o', '--outformat', default="fastq",
                      help="Format of input file")
    parser.add_option('-b', '--inoff', default='sanger',
                      help="Base offset of input quals [SANGER = 33]")
    parser.add_option('-B', '--outoff', default='sanger',
                      help="Base offset of output quals [SANGER = 33]")

    cmd = Command(do_convert, parser, name='ngs-convert-quals')

    if cmd.options.informat not in __parsers:
        cmd.error("Unknown input format: %s", cmd.options.informat)
    if cmd.options.outformat not in __outcons:
        cmd.error("Unknown output format: %s", cmd.options.outformat)
    
    ## did user input in/out bases as names?
    cmd.options.inoff = match_phred_offset(cmd.options.inoff)
    cmd.options.outoff = match_phred_offset(cmd.options.outoff)
    
    cmd.run()

