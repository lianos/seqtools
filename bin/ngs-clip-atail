#!/usr/bin/env python

from __future__ import division

from optparse import OptionParser
from string import maketrans
import re

import seqtools
from seqtools.qualities import convert_quality, match_phred_offset

usage = """usage: %prog [options] FASTQ_IN [OUTFILE]

Strips the homopolymer A tails from a read and stored a compressed version of
it in the read's ID.

For example, the following read::

    @HISEQ2:357:D10W6ACXX:1:1101:1359:2193 1:N:0:CGATGT
    ATTTTTGAGTGATTAAAAATGAAATGTCCTTTGTAAAAAAAAAAAAAAAAA
    +
    @@CFFFFDHADFHGHIIJIEH@HFHIIIIJJJEHIIGGJFIIJIIHDDDDD
    
Will be converted to::

    @HISEQ2:357:D10W6ACXX:1:1101:1359:2193 1:N:0:CGATGT A17
    ATTTTTGAGTGATTAAAAATGAAATGTCCTTTGT
    +
    @@CFFFFDHADFHGHIIJIEH@HFHIIIIJJJEH

"""

__parsers = {
    'fastq' : seqtools.fastq.parse,
    'fasta' : seqtools.fasta.parse,
    'qseq'  : seqtools.qseq.parse,
    'bowtie': seqtools.bowtie.parse
}

def translate_match(seq):
    """
    Convert AAAAAAAAA to A9
    
    TODO: Enable CIGAR like encoding when we support tolerance > 0
    """
    return "A%d" % len(seq)

def do_strip(cmd):
    format = cmd.options.format
    parse = __parsers[format]
    write = cmd.outfile.write
    
    nt = cmd.options.nucleotide
    tol = cmd.options.tolerance
    minlength = cmd.options.minlength
    ## TODO: Implement tol -- maybe like bwa's quality trimmer
    
    nreads = 0
    ntrashed = 0
    regex = re.compile("(%s+$)" % nt)
    
    for (idx,read) in enumerate(parse(cmd.infile)):
        nreads += 1
        ## Spaces are no good in ID's (aligner may clip at first space)
        rid = read.id.replace(" ", "::")
        seq = read.sequence
        qual = read.quality
        m = regex.search(seq)
        if m:
            to = m.span()[0]
            seq = seq[:to]
            read.sequence = seq
            read.quality = qual[:to]
            # TODO: Implement translate_match when we implement tolerance
            # rid = "%s::%s" % (rid, translate_match(m.group()))
            rid = "%s::A%d" % (rid, len(m.group()))
        else:
            rid = "%s::%d" % (rid, 0)
        read.id = rid
        L = len(seq)
        if L > 4 and minlength > 0 and L > minlength:
            write(str(read))
        else:
            ntrashed += 1
    cmd.add_stat('Reads processed', nreads)
    cmd.add_stat('Reads trashed', ntrashed)

if __name__ == '__main__':
    parser = OptionParser(usage=usage)
    parser.add_option('-f', '--format', default="fastq",
                      help="Sequence formt [fastq]")
    parser.add_option("-n", "--nucleotide", dest="nucleotide", default="A",
                      help="The nucleotide to strip off the end of the read [A]")
    parser.add_option('-t', '--tolerance', type="float", default=0.0,
                      help="Appetite for chewing through NT's that aren't " \
                           "[not implemented]")
    #
    parser.add_option('-l', '--minlength', dest="minlength", type="int", default=21,
                      help="Discard reads shorter than MINLENGTH [21] (absolute min is 4)")

    cmd = seqtools.Command(do_strip, parser, name='ngs-clip-atail')

    if cmd.options.format not in __parsers:
        cmd.error("Unknown input format: %s", cmd.options.informat)
    
    cmd.run()
