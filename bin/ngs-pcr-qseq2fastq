#!/usr/bin/env python
from __future__ import division

import os, sys, time
from optparse import OptionParser
from itertools import izip

from seqtools import fastq, io
from seqtools.fastq import 
if __name__ == '__main__':
    usage = """usage: %prog [options] READS_QSEQ BARCODE_SQEQ [OUTFILE]

    Combine qseq files from pcr-barcoded experiment into a FASTQ file.
    
    This currently skips the first 6 nucleotides (which is the multiplex barcode)
    """

    parser = OptionParser(usage=usage)
    parser.add_option("-f", "--filterqc", dest="filterqc", default=False,
                      type=bool,
                      help="If set, reads (or barcodes) that did not pass " \
                           "QC check are removed from the output fastq")
    (options, args) = parser.parse_args()
    
    ## Check input files
    if len(args) < 2:
        parser.error("Two input files required")
    seqfile = args[0]
    pcrfile = args[1]
    if not os.path.isfile(seqfile):
        parser.error("Cannot read sequence qseq file")
    if not os.path.isfile(pcrfile):
        parser.error("Cannot read PCR barcoded file")
    seqfile = 
    
    ## Check output
    if len(args) == 3:
        outfile = args[2]
        if os.path.isfile(outfile):
            parser.error("Destination file already exists")
        outfile = io.xopen(outfile, 'w')
        close_out = True
    else:
        outfile = sys.stdout
        close_out = False
    
    filterqc = options.filterqc
        
    t0 = time.time()
    
    for (idx,seqline,pcrline) in enumerate(izip(seqfile, pcrfile)):
        seqq = QseqRead.from_record(seqline)
        pcrq = QseqRead.from_record(pcrline)
        if filterqc:
            if not (seqq.qc and pcrq.qc):
                continue
        seqq.id = "%s:%s" % (pcrq.sequence[6:], seqq.id)
        outfile.write(seqq.to_fastq())
        
    elapsed = time.time() - t0
    
    seqfile.close()
    pcrfile.close()
    if close_out:
        outfile.close()
    
    
    